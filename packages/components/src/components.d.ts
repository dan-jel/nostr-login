/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import { AuthMethod, BannerNotify, ConnectionString, Info, NlTheme, RecentType } from './types/index';
import { OptionType } from './components/nl-select/nl-select';
export { AuthMethod, BannerNotify, ConnectionString, Info, NlTheme, RecentType } from './types/index';
export { OptionType } from './components/nl-select/nl-select';
export namespace Components {
  interface ButtonBase {
    darkMode: boolean;
    disabled: boolean;
    theme: NlTheme;
    titleBtn: string;
  }
  interface NlAuth {
    accounts: Info[];
    authMethods: AuthMethod[];
    authUrl: string;
    bunkers: string;
    connectionString: string;
    connectionStringServices: ConnectionString[];
    darkMode: boolean;
    error: string;
    hasExtension: boolean;
    hasOTP: boolean;
    iframeUrl: string;
    isLoading: boolean;
    isLoadingExtension: boolean;
    isOTP: boolean;
    localSignup: boolean;
    njumpIframe: string;
    recents: RecentType[];
    signupNjump: boolean;
    startScreen: string;
    theme: NlTheme;
    welcomeDescription: string;
    welcomeTitle: string;
  }
  interface NlBanner {
    accounts: Info[];
    darkMode: boolean;
    hiddenMode: boolean;
    isLoading: boolean;
    isOpen: boolean;
    notify: BannerNotify | null;
    theme: NlTheme;
    titleBanner: string;
    userInfo: Info | null;
  }
  interface NlButton {
    darkMode: boolean;
    disabled: boolean;
    theme: NlTheme;
    titleBtn: string;
  }
  interface NlChangeAccount {
    accounts: Info[];
    currentAccount: Info;
    darkMode: boolean;
    theme: 'default' | 'ocean' | 'lemonade' | 'purple';
  }
  interface NlConfirmLogout {}
  interface NlConnect {
    authMethods: AuthMethod[];
    connectionStringServices: ConnectionString[];
    hasOTP: boolean;
  }
  interface NlDialog {}
  interface NlIframe {
    iframeUrl: string;
  }
  interface NlImportFlow {
    services: ConnectionString[];
  }
  interface NlInfo {}
  interface NlInfoExtension {}
  interface NlLoading {
    path: string;
  }
  interface NlLocalSignup {
    signupNjump: boolean;
  }
  interface NlLoginStatus {
    info: RecentType | Info | undefined;
  }
  interface NlOtpMigrate {
    services: ConnectionString[];
  }
  interface NlPreviouslyLogged {
    accounts: Info[];
    recents: RecentType[];
  }
  interface NlSelect {
    darkMode: boolean;
    options: OptionType[];
    selected: number;
    theme: 'default' | 'ocean' | 'lemonade' | 'purple';
  }
  interface NlSignin {}
  interface NlSigninBunkerUrl {}
  interface NlSigninConnectionString {
    connectionString: string;
  }
  interface NlSigninOtp {}
  interface NlSigninReadOnly {}
  interface NlSignup {
    bunkers: string;
  }
  interface NlWelcome {}
  interface NlWelcomeSignin {
    authMethods: AuthMethod[];
    hasExtension: boolean;
    hasOTP: boolean;
  }
  interface NlWelcomeSignup {}
}
export interface NlAuthCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlAuthElement;
}
export interface NlBannerCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlBannerElement;
}
export interface NlChangeAccountCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlChangeAccountElement;
}
export interface NlConfirmLogoutCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlConfirmLogoutElement;
}
export interface NlConnectCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlConnectElement;
}
export interface NlIframeCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlIframeElement;
}
export interface NlImportFlowCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlImportFlowElement;
}
export interface NlLoadingCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlLoadingElement;
}
export interface NlLocalSignupCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlLocalSignupElement;
}
export interface NlOtpMigrateCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlOtpMigrateElement;
}
export interface NlPreviouslyLoggedCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlPreviouslyLoggedElement;
}
export interface NlSelectCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlSelectElement;
}
export interface NlSigninCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlSigninElement;
}
export interface NlSigninBunkerUrlCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlSigninBunkerUrlElement;
}
export interface NlSigninConnectionStringCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlSigninConnectionStringElement;
}
export interface NlSigninOtpCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlSigninOtpElement;
}
export interface NlSigninReadOnlyCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlSigninReadOnlyElement;
}
export interface NlSignupCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlSignupElement;
}
export interface NlWelcomeSigninCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNlWelcomeSigninElement;
}
declare global {
  interface HTMLButtonBaseElement extends Components.ButtonBase, HTMLStencilElement {}
  var HTMLButtonBaseElement: {
    prototype: HTMLButtonBaseElement;
    new (): HTMLButtonBaseElement;
  };
  interface HTMLNlAuthElementEventMap {
    nlCloseModal: any;
    nlChangeDarkMode: boolean;
    nlNostrConnectDefaultCancel: void;
  }
  interface HTMLNlAuthElement extends Components.NlAuth, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlAuthElementEventMap>(
      type: K,
      listener: (this: HTMLNlAuthElement, ev: NlAuthCustomEvent<HTMLNlAuthElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlAuthElementEventMap>(
      type: K,
      listener: (this: HTMLNlAuthElement, ev: NlAuthCustomEvent<HTMLNlAuthElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlAuthElement: {
    prototype: HTMLNlAuthElement;
    new (): HTMLNlAuthElement;
  };
  interface HTMLNlBannerElementEventMap {
    handleNotifyConfirmBanner: string;
    handleNotifyConfirmBannerIframe: string;
    handleLoginBanner: string;
    handleLogoutBanner: string;
    handleOpenWelcomeModal: string;
    handleConfirmLogout: string;
    handleImportModal: string;
  }
  interface HTMLNlBannerElement extends Components.NlBanner, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlBannerElementEventMap>(
      type: K,
      listener: (this: HTMLNlBannerElement, ev: NlBannerCustomEvent<HTMLNlBannerElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlBannerElementEventMap>(
      type: K,
      listener: (this: HTMLNlBannerElement, ev: NlBannerCustomEvent<HTMLNlBannerElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlBannerElement: {
    prototype: HTMLNlBannerElement;
    new (): HTMLNlBannerElement;
  };
  interface HTMLNlButtonElement extends Components.NlButton, HTMLStencilElement {}
  var HTMLNlButtonElement: {
    prototype: HTMLNlButtonElement;
    new (): HTMLNlButtonElement;
  };
  interface HTMLNlChangeAccountElementEventMap {
    handleOpenWelcomeModal: string;
    handleSwitchAccount: Info;
  }
  interface HTMLNlChangeAccountElement extends Components.NlChangeAccount, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlChangeAccountElementEventMap>(
      type: K,
      listener: (this: HTMLNlChangeAccountElement, ev: NlChangeAccountCustomEvent<HTMLNlChangeAccountElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlChangeAccountElementEventMap>(
      type: K,
      listener: (this: HTMLNlChangeAccountElement, ev: NlChangeAccountCustomEvent<HTMLNlChangeAccountElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlChangeAccountElement: {
    prototype: HTMLNlChangeAccountElement;
    new (): HTMLNlChangeAccountElement;
  };
  interface HTMLNlConfirmLogoutElementEventMap {
    handleLogoutBanner: string;
    handleBackUpModal: string;
    nlCloseModal: any;
  }
  interface HTMLNlConfirmLogoutElement extends Components.NlConfirmLogout, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlConfirmLogoutElementEventMap>(
      type: K,
      listener: (this: HTMLNlConfirmLogoutElement, ev: NlConfirmLogoutCustomEvent<HTMLNlConfirmLogoutElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlConfirmLogoutElementEventMap>(
      type: K,
      listener: (this: HTMLNlConfirmLogoutElement, ev: NlConfirmLogoutCustomEvent<HTMLNlConfirmLogoutElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlConfirmLogoutElement: {
    prototype: HTMLNlConfirmLogoutElement;
    new (): HTMLNlConfirmLogoutElement;
  };
  interface HTMLNlConnectElementEventMap {
    nlNostrConnect: ConnectionString;
  }
  interface HTMLNlConnectElement extends Components.NlConnect, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlConnectElementEventMap>(
      type: K,
      listener: (this: HTMLNlConnectElement, ev: NlConnectCustomEvent<HTMLNlConnectElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlConnectElementEventMap>(
      type: K,
      listener: (this: HTMLNlConnectElement, ev: NlConnectCustomEvent<HTMLNlConnectElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlConnectElement: {
    prototype: HTMLNlConnectElement;
    new (): HTMLNlConnectElement;
  };
  interface HTMLNlDialogElement extends Components.NlDialog, HTMLStencilElement {}
  var HTMLNlDialogElement: {
    prototype: HTMLNlDialogElement;
    new (): HTMLNlDialogElement;
  };
  interface HTMLNlIframeElementEventMap {
    nlCloseModal: any;
  }
  interface HTMLNlIframeElement extends Components.NlIframe, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlIframeElementEventMap>(
      type: K,
      listener: (this: HTMLNlIframeElement, ev: NlIframeCustomEvent<HTMLNlIframeElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlIframeElementEventMap>(
      type: K,
      listener: (this: HTMLNlIframeElement, ev: NlIframeCustomEvent<HTMLNlIframeElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlIframeElement: {
    prototype: HTMLNlIframeElement;
    new (): HTMLNlIframeElement;
  };
  interface HTMLNlImportFlowElementEventMap {
    nlImportAccount: ConnectionString;
    nlExportKeys: void;
  }
  interface HTMLNlImportFlowElement extends Components.NlImportFlow, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlImportFlowElementEventMap>(
      type: K,
      listener: (this: HTMLNlImportFlowElement, ev: NlImportFlowCustomEvent<HTMLNlImportFlowElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlImportFlowElementEventMap>(
      type: K,
      listener: (this: HTMLNlImportFlowElement, ev: NlImportFlowCustomEvent<HTMLNlImportFlowElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlImportFlowElement: {
    prototype: HTMLNlImportFlowElement;
    new (): HTMLNlImportFlowElement;
  };
  interface HTMLNlInfoElement extends Components.NlInfo, HTMLStencilElement {}
  var HTMLNlInfoElement: {
    prototype: HTMLNlInfoElement;
    new (): HTMLNlInfoElement;
  };
  interface HTMLNlInfoExtensionElement extends Components.NlInfoExtension, HTMLStencilElement {}
  var HTMLNlInfoExtensionElement: {
    prototype: HTMLNlInfoExtensionElement;
    new (): HTMLNlInfoExtensionElement;
  };
  interface HTMLNlLoadingElementEventMap {
    stopFetchHandler: boolean;
    handleContinue: boolean;
  }
  interface HTMLNlLoadingElement extends Components.NlLoading, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlLoadingElementEventMap>(
      type: K,
      listener: (this: HTMLNlLoadingElement, ev: NlLoadingCustomEvent<HTMLNlLoadingElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlLoadingElementEventMap>(
      type: K,
      listener: (this: HTMLNlLoadingElement, ev: NlLoadingCustomEvent<HTMLNlLoadingElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlLoadingElement: {
    prototype: HTMLNlLoadingElement;
    new (): HTMLNlLoadingElement;
  };
  interface HTMLNlLocalSignupElementEventMap {
    nlLocalSignup: string;
    nlSignupNjump: void;
    fetchHandler: boolean;
  }
  interface HTMLNlLocalSignupElement extends Components.NlLocalSignup, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlLocalSignupElementEventMap>(
      type: K,
      listener: (this: HTMLNlLocalSignupElement, ev: NlLocalSignupCustomEvent<HTMLNlLocalSignupElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlLocalSignupElementEventMap>(
      type: K,
      listener: (this: HTMLNlLocalSignupElement, ev: NlLocalSignupCustomEvent<HTMLNlLocalSignupElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlLocalSignupElement: {
    prototype: HTMLNlLocalSignupElement;
    new (): HTMLNlLocalSignupElement;
  };
  interface HTMLNlLoginStatusElement extends Components.NlLoginStatus, HTMLStencilElement {}
  var HTMLNlLoginStatusElement: {
    prototype: HTMLNlLoginStatusElement;
    new (): HTMLNlLoginStatusElement;
  };
  interface HTMLNlOtpMigrateElementEventMap {
    nlImportAccount: ConnectionString;
  }
  interface HTMLNlOtpMigrateElement extends Components.NlOtpMigrate, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlOtpMigrateElementEventMap>(
      type: K,
      listener: (this: HTMLNlOtpMigrateElement, ev: NlOtpMigrateCustomEvent<HTMLNlOtpMigrateElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlOtpMigrateElementEventMap>(
      type: K,
      listener: (this: HTMLNlOtpMigrateElement, ev: NlOtpMigrateCustomEvent<HTMLNlOtpMigrateElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlOtpMigrateElement: {
    prototype: HTMLNlOtpMigrateElement;
    new (): HTMLNlOtpMigrateElement;
  };
  interface HTMLNlPreviouslyLoggedElementEventMap {
    nlSwitchAccount: Info;
    nlLoginRecentAccount: RecentType;
    nlRemoveRecent: RecentType;
  }
  interface HTMLNlPreviouslyLoggedElement extends Components.NlPreviouslyLogged, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlPreviouslyLoggedElementEventMap>(
      type: K,
      listener: (this: HTMLNlPreviouslyLoggedElement, ev: NlPreviouslyLoggedCustomEvent<HTMLNlPreviouslyLoggedElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlPreviouslyLoggedElementEventMap>(
      type: K,
      listener: (this: HTMLNlPreviouslyLoggedElement, ev: NlPreviouslyLoggedCustomEvent<HTMLNlPreviouslyLoggedElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlPreviouslyLoggedElement: {
    prototype: HTMLNlPreviouslyLoggedElement;
    new (): HTMLNlPreviouslyLoggedElement;
  };
  interface HTMLNlSelectElementEventMap {
    selectDomain: string;
  }
  interface HTMLNlSelectElement extends Components.NlSelect, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlSelectElementEventMap>(
      type: K,
      listener: (this: HTMLNlSelectElement, ev: NlSelectCustomEvent<HTMLNlSelectElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlSelectElementEventMap>(
      type: K,
      listener: (this: HTMLNlSelectElement, ev: NlSelectCustomEvent<HTMLNlSelectElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlSelectElement: {
    prototype: HTMLNlSelectElement;
    new (): HTMLNlSelectElement;
  };
  interface HTMLNlSigninElementEventMap {
    nlLogin: string;
    nlCheckLogin: string;
  }
  interface HTMLNlSigninElement extends Components.NlSignin, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlSigninElementEventMap>(
      type: K,
      listener: (this: HTMLNlSigninElement, ev: NlSigninCustomEvent<HTMLNlSigninElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlSigninElementEventMap>(
      type: K,
      listener: (this: HTMLNlSigninElement, ev: NlSigninCustomEvent<HTMLNlSigninElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlSigninElement: {
    prototype: HTMLNlSigninElement;
    new (): HTMLNlSigninElement;
  };
  interface HTMLNlSigninBunkerUrlElementEventMap {
    nlLogin: string;
    nlCheckLogin: string;
  }
  interface HTMLNlSigninBunkerUrlElement extends Components.NlSigninBunkerUrl, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlSigninBunkerUrlElementEventMap>(
      type: K,
      listener: (this: HTMLNlSigninBunkerUrlElement, ev: NlSigninBunkerUrlCustomEvent<HTMLNlSigninBunkerUrlElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlSigninBunkerUrlElementEventMap>(
      type: K,
      listener: (this: HTMLNlSigninBunkerUrlElement, ev: NlSigninBunkerUrlCustomEvent<HTMLNlSigninBunkerUrlElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlSigninBunkerUrlElement: {
    prototype: HTMLNlSigninBunkerUrlElement;
    new (): HTMLNlSigninBunkerUrlElement;
  };
  interface HTMLNlSigninConnectionStringElementEventMap {
    nlNostrConnectDefault: void;
  }
  interface HTMLNlSigninConnectionStringElement extends Components.NlSigninConnectionString, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlSigninConnectionStringElementEventMap>(
      type: K,
      listener: (this: HTMLNlSigninConnectionStringElement, ev: NlSigninConnectionStringCustomEvent<HTMLNlSigninConnectionStringElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlSigninConnectionStringElementEventMap>(
      type: K,
      listener: (this: HTMLNlSigninConnectionStringElement, ev: NlSigninConnectionStringCustomEvent<HTMLNlSigninConnectionStringElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlSigninConnectionStringElement: {
    prototype: HTMLNlSigninConnectionStringElement;
    new (): HTMLNlSigninConnectionStringElement;
  };
  interface HTMLNlSigninOtpElementEventMap {
    nlLoginOTPUser: string;
    nlLoginOTPCode: string;
    nlCheckLogin: string;
  }
  interface HTMLNlSigninOtpElement extends Components.NlSigninOtp, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlSigninOtpElementEventMap>(
      type: K,
      listener: (this: HTMLNlSigninOtpElement, ev: NlSigninOtpCustomEvent<HTMLNlSigninOtpElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlSigninOtpElementEventMap>(
      type: K,
      listener: (this: HTMLNlSigninOtpElement, ev: NlSigninOtpCustomEvent<HTMLNlSigninOtpElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlSigninOtpElement: {
    prototype: HTMLNlSigninOtpElement;
    new (): HTMLNlSigninOtpElement;
  };
  interface HTMLNlSigninReadOnlyElementEventMap {
    nlLoginReadOnly: string;
    nlCheckLogin: string;
  }
  interface HTMLNlSigninReadOnlyElement extends Components.NlSigninReadOnly, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlSigninReadOnlyElementEventMap>(
      type: K,
      listener: (this: HTMLNlSigninReadOnlyElement, ev: NlSigninReadOnlyCustomEvent<HTMLNlSigninReadOnlyElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlSigninReadOnlyElementEventMap>(
      type: K,
      listener: (this: HTMLNlSigninReadOnlyElement, ev: NlSigninReadOnlyCustomEvent<HTMLNlSigninReadOnlyElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlSigninReadOnlyElement: {
    prototype: HTMLNlSigninReadOnlyElement;
    new (): HTMLNlSigninReadOnlyElement;
  };
  interface HTMLNlSignupElementEventMap {
    nlSignup: string;
    nlCheckSignup: string;
    fetchHandler: boolean;
  }
  interface HTMLNlSignupElement extends Components.NlSignup, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlSignupElementEventMap>(
      type: K,
      listener: (this: HTMLNlSignupElement, ev: NlSignupCustomEvent<HTMLNlSignupElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlSignupElementEventMap>(
      type: K,
      listener: (this: HTMLNlSignupElement, ev: NlSignupCustomEvent<HTMLNlSignupElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlSignupElement: {
    prototype: HTMLNlSignupElement;
    new (): HTMLNlSignupElement;
  };
  interface HTMLNlWelcomeElement extends Components.NlWelcome, HTMLStencilElement {}
  var HTMLNlWelcomeElement: {
    prototype: HTMLNlWelcomeElement;
    new (): HTMLNlWelcomeElement;
  };
  interface HTMLNlWelcomeSigninElementEventMap {
    nlLoginExtension: void;
  }
  interface HTMLNlWelcomeSigninElement extends Components.NlWelcomeSignin, HTMLStencilElement {
    addEventListener<K extends keyof HTMLNlWelcomeSigninElementEventMap>(
      type: K,
      listener: (this: HTMLNlWelcomeSigninElement, ev: NlWelcomeSigninCustomEvent<HTMLNlWelcomeSigninElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLNlWelcomeSigninElementEventMap>(
      type: K,
      listener: (this: HTMLNlWelcomeSigninElement, ev: NlWelcomeSigninCustomEvent<HTMLNlWelcomeSigninElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  var HTMLNlWelcomeSigninElement: {
    prototype: HTMLNlWelcomeSigninElement;
    new (): HTMLNlWelcomeSigninElement;
  };
  interface HTMLNlWelcomeSignupElement extends Components.NlWelcomeSignup, HTMLStencilElement {}
  var HTMLNlWelcomeSignupElement: {
    prototype: HTMLNlWelcomeSignupElement;
    new (): HTMLNlWelcomeSignupElement;
  };
  interface HTMLElementTagNameMap {
    'button-base': HTMLButtonBaseElement;
    'nl-auth': HTMLNlAuthElement;
    'nl-banner': HTMLNlBannerElement;
    'nl-button': HTMLNlButtonElement;
    'nl-change-account': HTMLNlChangeAccountElement;
    'nl-confirm-logout': HTMLNlConfirmLogoutElement;
    'nl-connect': HTMLNlConnectElement;
    'nl-dialog': HTMLNlDialogElement;
    'nl-iframe': HTMLNlIframeElement;
    'nl-import-flow': HTMLNlImportFlowElement;
    'nl-info': HTMLNlInfoElement;
    'nl-info-extension': HTMLNlInfoExtensionElement;
    'nl-loading': HTMLNlLoadingElement;
    'nl-local-signup': HTMLNlLocalSignupElement;
    'nl-login-status': HTMLNlLoginStatusElement;
    'nl-otp-migrate': HTMLNlOtpMigrateElement;
    'nl-previously-logged': HTMLNlPreviouslyLoggedElement;
    'nl-select': HTMLNlSelectElement;
    'nl-signin': HTMLNlSigninElement;
    'nl-signin-bunker-url': HTMLNlSigninBunkerUrlElement;
    'nl-signin-connection-string': HTMLNlSigninConnectionStringElement;
    'nl-signin-otp': HTMLNlSigninOtpElement;
    'nl-signin-read-only': HTMLNlSigninReadOnlyElement;
    'nl-signup': HTMLNlSignupElement;
    'nl-welcome': HTMLNlWelcomeElement;
    'nl-welcome-signin': HTMLNlWelcomeSigninElement;
    'nl-welcome-signup': HTMLNlWelcomeSignupElement;
  }
}
declare namespace LocalJSX {
  interface ButtonBase {
    darkMode?: boolean;
    disabled?: boolean;
    theme?: NlTheme;
    titleBtn?: string;
  }
  interface NlAuth {
    accounts?: Info[];
    authMethods?: AuthMethod[];
    authUrl?: string;
    bunkers?: string;
    connectionString?: string;
    connectionStringServices?: ConnectionString[];
    darkMode?: boolean;
    error?: string;
    hasExtension?: boolean;
    hasOTP?: boolean;
    iframeUrl?: string;
    isLoading?: boolean;
    isLoadingExtension?: boolean;
    isOTP?: boolean;
    localSignup?: boolean;
    njumpIframe?: string;
    onNlChangeDarkMode?: (event: NlAuthCustomEvent<boolean>) => void;
    onNlCloseModal?: (event: NlAuthCustomEvent<any>) => void;
    onNlNostrConnectDefaultCancel?: (event: NlAuthCustomEvent<void>) => void;
    recents?: RecentType[];
    signupNjump?: boolean;
    startScreen?: string;
    theme?: NlTheme;
    welcomeDescription?: string;
    welcomeTitle?: string;
  }
  interface NlBanner {
    accounts?: Info[];
    darkMode?: boolean;
    hiddenMode?: boolean;
    isLoading?: boolean;
    isOpen?: boolean;
    notify?: BannerNotify | null;
    onHandleConfirmLogout?: (event: NlBannerCustomEvent<string>) => void;
    onHandleImportModal?: (event: NlBannerCustomEvent<string>) => void;
    onHandleLoginBanner?: (event: NlBannerCustomEvent<string>) => void;
    onHandleLogoutBanner?: (event: NlBannerCustomEvent<string>) => void;
    onHandleNotifyConfirmBanner?: (event: NlBannerCustomEvent<string>) => void;
    onHandleNotifyConfirmBannerIframe?: (event: NlBannerCustomEvent<string>) => void;
    onHandleOpenWelcomeModal?: (event: NlBannerCustomEvent<string>) => void;
    theme?: NlTheme;
    titleBanner?: string;
    userInfo?: Info | null;
  }
  interface NlButton {
    darkMode?: boolean;
    disabled?: boolean;
    theme?: NlTheme;
    titleBtn?: string;
  }
  interface NlChangeAccount {
    accounts?: Info[];
    currentAccount?: Info;
    darkMode?: boolean;
    onHandleOpenWelcomeModal?: (event: NlChangeAccountCustomEvent<string>) => void;
    onHandleSwitchAccount?: (event: NlChangeAccountCustomEvent<Info>) => void;
    theme?: 'default' | 'ocean' | 'lemonade' | 'purple';
  }
  interface NlConfirmLogout {
    onHandleBackUpModal?: (event: NlConfirmLogoutCustomEvent<string>) => void;
    onHandleLogoutBanner?: (event: NlConfirmLogoutCustomEvent<string>) => void;
    onNlCloseModal?: (event: NlConfirmLogoutCustomEvent<any>) => void;
  }
  interface NlConnect {
    authMethods?: AuthMethod[];
    connectionStringServices?: ConnectionString[];
    hasOTP?: boolean;
    onNlNostrConnect?: (event: NlConnectCustomEvent<ConnectionString>) => void;
  }
  interface NlDialog {}
  interface NlIframe {
    iframeUrl?: string;
    onNlCloseModal?: (event: NlIframeCustomEvent<any>) => void;
  }
  interface NlImportFlow {
    onNlExportKeys?: (event: NlImportFlowCustomEvent<void>) => void;
    onNlImportAccount?: (event: NlImportFlowCustomEvent<ConnectionString>) => void;
    services?: ConnectionString[];
  }
  interface NlInfo {}
  interface NlInfoExtension {}
  interface NlLoading {
    onHandleContinue?: (event: NlLoadingCustomEvent<boolean>) => void;
    onStopFetchHandler?: (event: NlLoadingCustomEvent<boolean>) => void;
    path?: string;
  }
  interface NlLocalSignup {
    onFetchHandler?: (event: NlLocalSignupCustomEvent<boolean>) => void;
    onNlLocalSignup?: (event: NlLocalSignupCustomEvent<string>) => void;
    onNlSignupNjump?: (event: NlLocalSignupCustomEvent<void>) => void;
    signupNjump?: boolean;
  }
  interface NlLoginStatus {
    info?: RecentType | Info | undefined;
  }
  interface NlOtpMigrate {
    onNlImportAccount?: (event: NlOtpMigrateCustomEvent<ConnectionString>) => void;
    services?: ConnectionString[];
  }
  interface NlPreviouslyLogged {
    accounts?: Info[];
    onNlLoginRecentAccount?: (event: NlPreviouslyLoggedCustomEvent<RecentType>) => void;
    onNlRemoveRecent?: (event: NlPreviouslyLoggedCustomEvent<RecentType>) => void;
    onNlSwitchAccount?: (event: NlPreviouslyLoggedCustomEvent<Info>) => void;
    recents?: RecentType[];
  }
  interface NlSelect {
    darkMode?: boolean;
    onSelectDomain?: (event: NlSelectCustomEvent<string>) => void;
    options?: OptionType[];
    selected?: number;
    theme?: 'default' | 'ocean' | 'lemonade' | 'purple';
  }
  interface NlSignin {
    onNlCheckLogin?: (event: NlSigninCustomEvent<string>) => void;
    onNlLogin?: (event: NlSigninCustomEvent<string>) => void;
  }
  interface NlSigninBunkerUrl {
    onNlCheckLogin?: (event: NlSigninBunkerUrlCustomEvent<string>) => void;
    onNlLogin?: (event: NlSigninBunkerUrlCustomEvent<string>) => void;
  }
  interface NlSigninConnectionString {
    connectionString?: string;
    onNlNostrConnectDefault?: (event: NlSigninConnectionStringCustomEvent<void>) => void;
  }
  interface NlSigninOtp {
    onNlCheckLogin?: (event: NlSigninOtpCustomEvent<string>) => void;
    onNlLoginOTPCode?: (event: NlSigninOtpCustomEvent<string>) => void;
    onNlLoginOTPUser?: (event: NlSigninOtpCustomEvent<string>) => void;
  }
  interface NlSigninReadOnly {
    onNlCheckLogin?: (event: NlSigninReadOnlyCustomEvent<string>) => void;
    onNlLoginReadOnly?: (event: NlSigninReadOnlyCustomEvent<string>) => void;
  }
  interface NlSignup {
    bunkers?: string;
    onFetchHandler?: (event: NlSignupCustomEvent<boolean>) => void;
    onNlCheckSignup?: (event: NlSignupCustomEvent<string>) => void;
    onNlSignup?: (event: NlSignupCustomEvent<string>) => void;
  }
  interface NlWelcome {}
  interface NlWelcomeSignin {
    authMethods?: AuthMethod[];
    hasExtension?: boolean;
    hasOTP?: boolean;
    onNlLoginExtension?: (event: NlWelcomeSigninCustomEvent<void>) => void;
  }
  interface NlWelcomeSignup {}
  interface IntrinsicElements {
    'button-base': ButtonBase;
    'nl-auth': NlAuth;
    'nl-banner': NlBanner;
    'nl-button': NlButton;
    'nl-change-account': NlChangeAccount;
    'nl-confirm-logout': NlConfirmLogout;
    'nl-connect': NlConnect;
    'nl-dialog': NlDialog;
    'nl-iframe': NlIframe;
    'nl-import-flow': NlImportFlow;
    'nl-info': NlInfo;
    'nl-info-extension': NlInfoExtension;
    'nl-loading': NlLoading;
    'nl-local-signup': NlLocalSignup;
    'nl-login-status': NlLoginStatus;
    'nl-otp-migrate': NlOtpMigrate;
    'nl-previously-logged': NlPreviouslyLogged;
    'nl-select': NlSelect;
    'nl-signin': NlSignin;
    'nl-signin-bunker-url': NlSigninBunkerUrl;
    'nl-signin-connection-string': NlSigninConnectionString;
    'nl-signin-otp': NlSigninOtp;
    'nl-signin-read-only': NlSigninReadOnly;
    'nl-signup': NlSignup;
    'nl-welcome': NlWelcome;
    'nl-welcome-signin': NlWelcomeSignin;
    'nl-welcome-signup': NlWelcomeSignup;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'button-base': LocalJSX.ButtonBase & JSXBase.HTMLAttributes<HTMLButtonBaseElement>;
      'nl-auth': LocalJSX.NlAuth & JSXBase.HTMLAttributes<HTMLNlAuthElement>;
      'nl-banner': LocalJSX.NlBanner & JSXBase.HTMLAttributes<HTMLNlBannerElement>;
      'nl-button': LocalJSX.NlButton & JSXBase.HTMLAttributes<HTMLNlButtonElement>;
      'nl-change-account': LocalJSX.NlChangeAccount & JSXBase.HTMLAttributes<HTMLNlChangeAccountElement>;
      'nl-confirm-logout': LocalJSX.NlConfirmLogout & JSXBase.HTMLAttributes<HTMLNlConfirmLogoutElement>;
      'nl-connect': LocalJSX.NlConnect & JSXBase.HTMLAttributes<HTMLNlConnectElement>;
      'nl-dialog': LocalJSX.NlDialog & JSXBase.HTMLAttributes<HTMLNlDialogElement>;
      'nl-iframe': LocalJSX.NlIframe & JSXBase.HTMLAttributes<HTMLNlIframeElement>;
      'nl-import-flow': LocalJSX.NlImportFlow & JSXBase.HTMLAttributes<HTMLNlImportFlowElement>;
      'nl-info': LocalJSX.NlInfo & JSXBase.HTMLAttributes<HTMLNlInfoElement>;
      'nl-info-extension': LocalJSX.NlInfoExtension & JSXBase.HTMLAttributes<HTMLNlInfoExtensionElement>;
      'nl-loading': LocalJSX.NlLoading & JSXBase.HTMLAttributes<HTMLNlLoadingElement>;
      'nl-local-signup': LocalJSX.NlLocalSignup & JSXBase.HTMLAttributes<HTMLNlLocalSignupElement>;
      'nl-login-status': LocalJSX.NlLoginStatus & JSXBase.HTMLAttributes<HTMLNlLoginStatusElement>;
      'nl-otp-migrate': LocalJSX.NlOtpMigrate & JSXBase.HTMLAttributes<HTMLNlOtpMigrateElement>;
      'nl-previously-logged': LocalJSX.NlPreviouslyLogged & JSXBase.HTMLAttributes<HTMLNlPreviouslyLoggedElement>;
      'nl-select': LocalJSX.NlSelect & JSXBase.HTMLAttributes<HTMLNlSelectElement>;
      'nl-signin': LocalJSX.NlSignin & JSXBase.HTMLAttributes<HTMLNlSigninElement>;
      'nl-signin-bunker-url': LocalJSX.NlSigninBunkerUrl & JSXBase.HTMLAttributes<HTMLNlSigninBunkerUrlElement>;
      'nl-signin-connection-string': LocalJSX.NlSigninConnectionString & JSXBase.HTMLAttributes<HTMLNlSigninConnectionStringElement>;
      'nl-signin-otp': LocalJSX.NlSigninOtp & JSXBase.HTMLAttributes<HTMLNlSigninOtpElement>;
      'nl-signin-read-only': LocalJSX.NlSigninReadOnly & JSXBase.HTMLAttributes<HTMLNlSigninReadOnlyElement>;
      'nl-signup': LocalJSX.NlSignup & JSXBase.HTMLAttributes<HTMLNlSignupElement>;
      'nl-welcome': LocalJSX.NlWelcome & JSXBase.HTMLAttributes<HTMLNlWelcomeElement>;
      'nl-welcome-signin': LocalJSX.NlWelcomeSignin & JSXBase.HTMLAttributes<HTMLNlWelcomeSigninElement>;
      'nl-welcome-signup': LocalJSX.NlWelcomeSignup & JSXBase.HTMLAttributes<HTMLNlWelcomeSignupElement>;
    }
  }
}
